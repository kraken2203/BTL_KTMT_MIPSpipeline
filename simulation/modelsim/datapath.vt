// Copyright (C) 1991-2012 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/16/2015 20:19:47"
                                                                                
// Verilog Test Bench template for design : datapath
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module datapath_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [2:0] alucontrold;
reg alusrcd;
reg branchd;
reg clk;
reg flushe;
reg forwardad;
reg forwardae;
reg forwardbd;
reg forwardbe;
reg [31:0] instr;
reg memtoregd;
reg memwrited;
reg [31:0] readdatam;
reg regdstd;
reg regwrited;
reg reset_n;
reg stalld;
reg stallf;
// wires                                               
wire [31:0]  aluoutmtodm;
wire [5:0]  functinstr;
wire memtorege;
wire memtoregm;
wire [5:0]  opinstr;
wire [31:0]  pc;
wire regwritee;
wire regwritem;
wire regwritewtohz;
wire [4:0]  rsd;
wire [4:0]  rse;
wire [4:0]  rtd;
wire [4:0]  rte;
wire we_todm;
wire [31:0]  writedatamtodm;
wire [4:0]  writerege;
wire [4:0]  writeregmtohz;
wire [4:0]  writeregwtohz;

// assign statements (if any)                          
datapath i1 (
// port map - connection between master ports and signals/registers   
	.alucontrold(alucontrold),
	.aluoutmtodm(aluoutmtodm),
	.alusrcd(alusrcd),
	.branchd(branchd),
	.clk(clk),
	.flushe(flushe),
	.forwardad(forwardad),
	.forwardae(forwardae),
	.forwardbd(forwardbd),
	.forwardbe(forwardbe),
	.functinstr(functinstr),
	.instr(instr),
	.memtoregd(memtoregd),
	.memtorege(memtorege),
	.memtoregm(memtoregm),
	.memwrited(memwrited),
	.opinstr(opinstr),
	.pc(pc),
	.readdatam(readdatam),
	.regdstd(regdstd),
	.regwrited(regwrited),
	.regwritee(regwritee),
	.regwritem(regwritem),
	.regwritewtohz(regwritewtohz),
	.reset_n(reset_n),
	.rsd(rsd),
	.rse(rse),
	.rtd(rtd),
	.rte(rte),
	.stalld(stalld),
	.stallf(stallf),
	.we_todm(we_todm),
	.writedatamtodm(writedatamtodm),
	.writerege(writerege),
	.writeregmtohz(writeregmtohz),
	.writeregwtohz(writeregwtohz)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

