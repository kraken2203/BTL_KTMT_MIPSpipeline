// Copyright (C) 1991-2012 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/16/2015 20:37:04"
                                                                                
// Verilog Test Bench template for design : HazardUnit
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module HazardUnit_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg BrachD;
reg MemtoRegE;
reg MemtoRegM;
reg RegWriteE;
reg RegWriteM;
reg RegWriteW;
reg [4:0] RsD;
reg [4:0] RsE;
reg [4:0] RtD;
reg [4:0] RtE;
reg [4:0] WriteRegE;
reg [4:0] WriteRegM;
reg [4:0] WriteRegW;
// wires                                               
wire FlushE;
wire ForwardAD;
wire [1:0]  ForwardAE;
wire ForwardBD;
wire [1:0]  ForwardBE;
wire StallD;
wire StallF;

// assign statements (if any)                          
HazardUnit i1 (
// port map - connection between master ports and signals/registers   
	.BrachD(BrachD),
	.FlushE(FlushE),
	.ForwardAD(ForwardAD),
	.ForwardAE(ForwardAE),
	.ForwardBD(ForwardBD),
	.ForwardBE(ForwardBE),
	.MemtoRegE(MemtoRegE),
	.MemtoRegM(MemtoRegM),
	.RegWriteE(RegWriteE),
	.RegWriteM(RegWriteM),
	.RegWriteW(RegWriteW),
	.RsD(RsD),
	.RsE(RsE),
	.RtD(RtD),
	.RtE(RtE),
	.StallD(StallD),
	.StallF(StallF),
	.WriteRegE(WriteRegE),
	.WriteRegM(WriteRegM),
	.WriteRegW(WriteRegW)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

